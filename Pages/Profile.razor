@page "/profile"
@using CRUD_Employee_standAlone.Models
@using CRUD_Employee_standAlone.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="max-w-4xl mx-auto py-8">
    <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">Profile Settings</h3>
        </div>

        @if (isLoading)
        {
            <div class="p-6 text-center">
                <div class="animate-spin inline-block w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full"></div>
                <p class="mt-2 text-gray-600">Loading...</p>
            </div>
        }
        else
        {
            <div class="p-6 space-y-8">
                <!-- Current Profile Info -->
                <div>
                    <h4 class="text-md font-semibold text-gray-900 mb-4">Current Information</h4>
                    @if (currentUser != null)
                    {
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 bg-gray-50 p-4 rounded-lg">
                            <div>
                                <span class="text-sm font-medium text-gray-500">Username:</span>
                                <p class="text-sm text-gray-900">@currentUser.Username</p>
                            </div>
                            <div>
                                <span class="text-sm font-medium text-gray-500">Email:</span>
                                <p class="text-sm text-gray-900">@currentUser.Email</p>
                            </div>
                            <div>
                                <span class="text-sm font-medium text-gray-500">Full Name:</span>
                                <p class="text-sm text-gray-900">@currentUser.FullName</p>
                            </div>
                            <div>
                                <span class="text-sm font-medium text-gray-500">Role:</span>
                                <p class="text-sm text-gray-900">@currentUser.Role</p>
                            </div>
                        </div>
                    }
                </div>

                <!-- Update Form -->
                <div>
                    <h4 class="text-md font-semibold text-gray-900 mb-4">Update Profile</h4>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                            @successMessage
                        </div>
                    }

                    <EditForm Model="updateModel" OnValidSubmit="HandleUpdate" class="space-y-4">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-red-600" />

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Username</label>
                                <InputText @bind-Value="updateModel.Username"
                                           class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700">Email</label>
                                <InputText type="email" @bind-Value="updateModel.Email"
                                           class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                            </div>

                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700">Full Name</label>
                                <InputText @bind-Value="updateModel.FullName"
                                           class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                            </div>

                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700">New Password (leave blank to keep current)</label>
                                <InputText type="password" @bind-Value="updateModel.Password"
                                           class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                            </div>
                        </div>

                        <div class="flex space-x-3">
                            <button type="submit" disabled="@isUpdating"
                                    class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50">
                                @if (isUpdating)
                                {
                                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                }
                                Update Profile
                            </button>

                            <button type="button" @onclick="LoadProfile"
                                    class="bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                                Reset
                            </button>
                        </div>
                    </EditForm>
                </div>

                <!-- Login History -->
                <div>
                    <h4 class="text-md font-semibold text-gray-900 mb-4">Recent Logins</h4>
                    @if (loginHistory != null && loginHistory.Any())
                    {
                        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-lg">
                            <table class="min-w-full divide-y divide-gray-300">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User Agent</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    @foreach (var login in loginHistory.Take(10))
                                    {
                                        <tr>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                @login.LoginTime.ToString("MMM dd, yyyy HH:mm")
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                @login.IpAddress
                                            </td>
                                            <td class="px-6 py-4 text-sm text-gray-900 truncate max-w-xs">
                                                @login.UserAgent
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-gray-500">No login history available.</p>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private UserResponse? currentUser;
    private UpdateUserRequest updateModel = new();
    private List<UserLogin>? loginHistory;
    private bool isLoading = true;
    private bool isUpdating = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
        await LoadLoginHistory();
        isLoading = false;
    }

    private async Task LoadProfile()
    {
        try
        {
            currentUser = await AuthService.GetProfileAsync();
            if (currentUser != null)
            {
                updateModel = new UpdateUserRequest
                {
                    Username = currentUser.Username,
                    Email = currentUser.Email,
                    FullName = currentUser.FullName
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load profile.";
            Console.WriteLine($"Error loading profile: {ex.Message}");
        }
    }

    private async Task LoadLoginHistory()
    {
        try
        {
            loginHistory = await AuthService.GetLoginHistoryAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading login history: {ex.Message}");
        }
    }

    private async Task HandleUpdate()
    {
        isUpdating = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var result = await AuthService.UpdateProfileAsync(updateModel);
            if (result)
            {
                successMessage = "Profile updated successfully!";
                await LoadProfile(); // Refresh the current user info
                updateModel.Password = string.Empty; // Clear password field
            }
            else
            {
                errorMessage = "Failed to update profile. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating profile.";
            Console.WriteLine($"Error updating profile: {ex.Message}");
        }
        finally
        {
            isUpdating = false;
        }
    }
}