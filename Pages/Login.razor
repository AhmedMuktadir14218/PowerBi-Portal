@page "/login"
@using CRUD_Employee_standAlone.Models
@using CRUD_Employee_standAlone.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider

<div class="min-h-screen flex items-center justify-center relative overflow-hidden">
    <!-- Blurred background image -->
    <div class="absolute inset-0 z-0">
        <img src="homeban55.jpg"
             alt="Background"
             class="w-full h-full object-cover" />
        <div class="absolute inset-0 bg-black bg-opacity-50 backdrop-blur-sm"></div>
    </div>

    <div class="relative z-10 w-full max-w-md px-4">
        <div class="bg-white rounded-xl shadow-2xl overflow-hidden transition-all duration-300 transform hover:scale-[1.01]">
            <div class="px-8 py-10 sm:p-10">
                <div class="text-center mb-8">
                    <div class="flex justify-center">
                        <img class="h-16 w-auto"
                             src="logoTusuka.png"
                             alt="Logo" />
                    </div>
                    <p class="mt-3 text-gray-600">Sign in to your account</p>
                </div>

                <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="space-y-6">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="rounded-lg bg-red-50 p-4 border border-red-100">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-red-500"
                                         xmlns="http://www.w3.org/2000/svg"
                                         viewBox="0 0 20 20"
                                         fill="currentColor">
                                        <path fill-rule="evenodd"
                                              d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                              clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <h3 class="text-sm font-medium text-red-800">
                                        @errorMessage
                                    </h3>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="space-y-4">
                        <div>
                            <label for="email"
                                   class="block text-sm font-medium text-gray-700 mb-1">
                                Email address
                            </label>
                            <InputText id="email"
                                       @bind-Value="loginModel.UsernameOrEmail"
                                       placeholder="your@email.com"
                                       class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-purple-600 focus:border-purple-600 outline-none transition duration-200" />
                            <ValidationMessage For="@(() => loginModel.UsernameOrEmail)" class="text-red-600 text-sm mt-1" />
                        </div>

                        <div>
                            <label for="password"
                                   class="block text-sm font-medium text-gray-700 mb-1">
                                Password
                            </label>
                            <InputText type="password"
                                       id="password"
                                       @bind-Value="loginModel.Password"
                                       placeholder="••••••••"
                                       class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-purple-600 focus:border-purple-600 outline-none transition duration-200" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-red-600 text-sm mt-1" />
                        </div>
                    </div>

                    <div class="pt-2">
                        <button type="submit"
                                disabled="@isLoading"
                                class="w-full flex justify-center items-center py-3 px-4 rounded-lg bg-gradient-to-r from-purple-500 to-indigo-600 text-white font-medium hover:opacity-90 transition duration-200 shadow-md disabled:opacity-50 disabled:cursor-not-allowed">
                            @if (isLoading)
                            {
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                                     xmlns="http://www.w3.org/2000/svg"
                                     fill="none"
                                     viewBox="0 0 24 24">
                                    <circle class="opacity-25"
                                            cx="12"
                                            cy="12"
                                            r="10"
                                            stroke="currentColor"
                                            stroke-width="4"></circle>
                                    <path class="opacity-75"
                                          fill="currentColor"
                                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Signing in...</span>
                            }
                            else
                            {
                                <span>Sign in</span>
                            }
                        </button>
                    </div>

                    <div class="text-center pt-4">
                        <a href="/register" class="text-sm text-purple-600 hover:text-purple-500 font-medium">
                            Don't have an account? Sign up
                        </a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            var role = await AuthService.GetRoleAsync();
            if (role?.ToLower() == "user")
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                Navigation.NavigateTo("/");
            }
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(loginModel);

            if (result != null)
            {
                AuthStateProvider.NotifyUserAuthentication(result.Token);

                // Navigate based on role
                if (result.Role.ToLower() == "user")
                {
                    Navigation.NavigateTo("/dashboard", forceLoad: true);
                }
                else
                {
                    Navigation.NavigateTo("/", forceLoad: true);
                }
            }
            else
            {
                errorMessage = "Invalid credentials. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}